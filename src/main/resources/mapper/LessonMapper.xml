<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.capstone.snowe.mapper.LessonMapper">

    <!-- ============= -->
    <!-- 강사가 강습 등록 -->
    <!-- ============= -->
    <insert id = "lessonInsert" parameterType="com.capstone.snowe.dto.LessonDTO">
        INSERT INTO LESSON(
                           LOGIN_ID,
                           LESSON_DATE,
                           LESSON_DATE_END,
                           LESSON_ID,
                           LESSON_DIV,
                           MAX_RESERVE_COUNT,
                           LESSON_TITLE,
                           LESSON_CLASS,
                           LESSON_LEVEL,
                           LESSON_START,
                           LESSON_END,
                           LESSON_AGE,
                           LESSON_INTRODUCE,
                           RESORT_ID)
        VALUES (
                #{loginId}, -- 토큰이 갖고있는 회원 ID
                TO_DATE(#{lessonDate}, 'YYYY-MM-DD'),
                TO_DATE(#{lessonDateEnd}, 'YYYY-MM-DD'),-- 강습날짜 선택 후
                'L' || LPAD(LESSON_SEQ.NEXTVAL, 6, 0), --시퀀스 처리
                #{lessonDiv}, -- 오전, 오후, 야간 중 입력받아서
                #{maxReserveCount}, -- 최대인원 설정하기
                #{lessonTitle}, -- 강습명
                #{lessonClass}, -- 스키 or 보드
                #{lessonLevel}, -- 난이도
                #{lessonStart},
                #{lessonEnd},
                #{lessonAge},
                #{lessonIntroduce},
                (SELECT RESORT_ID FROM TEACHER where LOGIN_ID = #{loginId})
               )
    </insert>

    <!-- =================  -->
    <!-- 강습에 대한 정보 수정 -->
    <!-- ================== -->
    <update id = "lessonUpdate" parameterType="com.capstone.snowe.dto.LessonDTO">
        UPDATE
            LESSON
        SET
            LESSON_TITLE = #{lessonTitle},
            MAX_RESERVE_COUNT = #{maxReserveCount}
        WHERE
            LESSON_ID = #{lessonId}
            AND LOGIN_ID = #{loginId}
    </update>

    <!-- ====================-->
    <!-- 업로드 한 강습 취소하기 -->
    <!-- ====================-->
    <update id = "lessonDel" parameterType="String">
        UPDATE
            LESSON
        SET
            DEL_YN = 'Y',
            DEL_DATE = SYSDATE
        WHERE
            LESSON_ID = #{lessonId}
          AND LOGIN_ID = #{loginId}
          AND DEL_YN = 'N'
    </update>

    <!-- ================================== -->
    <!-- 해당 날짜에 존재하는 강사의 강의 보여주기 -->
    <!-- ================================== -->
    <select id = "ableLessonListByDay" parameterType="String" resultType="com.capstone.snowe.dto.LessonJoinDTO">
--         SELECT
--             L.LESSON_ID,
--             L.LOGIN_ID,
--             T.NAME,
--             L.LESSON_TITLE,
--             L.LESSON_CLASS,
--             L.LESSON_LEVEL,
--             L.LESSON_INTRODUCE,
--             TO_CHAR(L.LESSON_DATE, 'YYYY-MM-DD') AS LESSON_DATE,
--             TO_CHAR(L.LESSON_DATE_END, 'YYYY-MM-DD') AS LESSON_DATE_END,
--             B.RESORT_ID,
--             L.RESERVE_COUNT,
--             L.MAX_RESERVE_COUNT,
--             L.LESSON_START,
--             L.LESSON_END,
--             D.DIV,
--             S.STAT
--         FROM
--             LESSON L
--                 INNER JOIN TEACHER T
--                            ON L.LOGIN_ID = T.LOGIN_ID
--                 INNER JOIN (SELECT CODE, CODE_VALUE AS RESORT_ID FROM COMMON_CODE WHERE NO = '005') B
--                            ON T.RESORT_ID = B.CODE
--                 INNER JOIN (SELECT CODE, CODE_VALUE AS DIV FROM COMMON_CODE WHERE NO = '004') D
--                            ON L.LESSON_DIV = D.CODE
--                 INNER JOIN (SELECT CODE, CODE_VALUE AS STAT FROM COMMON_CODE WHERE NO = '003') S
--                            ON L.LESSON_STAT = S.CODE
--         WHERE
--             L.LESSON_STAT = 'LS01'    -- 강습상태가 신청가능이면
--           AND TO_CHAR(L.LESSON_DATE, 'YYYY-MM-DD') = #{lessonDate} // TODO: 데이터보정필요

--          TEST
            SELECT
                L.LESSON_ID,
                L.LOGIN_ID,
--                 T.NAME,
                L.LESSON_TITLE,
                L.LESSON_CLASS,
                L.LESSON_LEVEL,
                L.LESSON_INTRODUCE,
                TO_CHAR(L.LESSON_DATE, 'YYYY-MM-DD') AS LESSON_DATE,
                TO_CHAR(L.LESSON_DATE_END, 'YYYY-MM-DD') AS LESSON_DATE_END,
                L.RESERVE_COUNT,
                L.MAX_RESERVE_COUNT,
                L.LESSON_START,
                L.LESSON_END,
                L.LESSON_DIV
            FROM
                LESSON L
--                     INNER JOIN TEACHER T
--                                ON L.LOGIN_ID = T.LOGIN_ID
            WHERE
                L.LESSON_STAT = 'LS01'    -- 강습상태가 신청가능이면
                AND TO_CHAR(L.LESSON_DATE, 'YYYY-MM-DD') = #{lessonDate}
    </select>

    <!-- 강의를 올린 강사만 수정하거나 취소할 수 있게 아이디 가져옴 -->
    <select id="selectLoginIdByLessonId" resultType="int">
        SELECT
            COUNT(LOGIN_ID)
        FROM
            LESSON
        WHERE
            LESSON_ID = #{lessonId}
            AND LOGIN_ID = #{loginId}
    </select>

</mapper>